plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}-fabric"
group = project.maven_group

minecraft {
	accessWidener = file("src/main/resources/ultra_amplified_dimension.accesswidener")
}

repositories {
	maven { url 'https://jitpack.io' }
	maven {
		name = "Ladysnake Libs"
		url = 'https://dl.bintray.com/ladysnake/libs'
	}
	maven { url 'https://maven.fabricmc.net/io/github/prospector/modmenu/' }
	maven { url "https://maven.shedaniel.me/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cardinal_version}"
	modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:${project.cardinal_version}"
	modImplementation "io.github.prospector:modmenu:${project.mod_menu_version}"

	modImplementation 'com.github.modmuss50:Voyager:1.0.0'
	include 'com.github.modmuss50:Voyager:1.0.0'
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}

	// Minifies all .json files when building the mod.
	// Source files are not minified, only the jar copies.
	doLast {

		def jsonMinifyStart = System.currentTimeMillis()
		def jsonMinified = 0
		def jsonBytesSaved = 0

		fileTree(dir: outputs.files.asPath, include: '**/*.json').each {

			File file = it
			jsonMinified++
			def oldLength = file.length()
			try{
				file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
			}
			catch(Exception e){
				System.out.println("Parsing JSON error in " + file.name)
				throw e
			}
			jsonBytesSaved += oldLength - file.length()
		}

		println('Minified ' + jsonMinified + ' json files. Saved ' + jsonBytesSaved + ' bytes. Took ' + (System.currentTimeMillis() - jsonMinifyStart) + 'ms.')
	}
}